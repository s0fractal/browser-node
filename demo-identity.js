#!/usr/bin/env node

/**
 * Demo Living Identity Vault
 * –ü–æ–∫–∞–∑—É—î —è–∫ –ø—Ä–∞—Ü—é—î —Å–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
 */

const { LivingIdentityVault } = require('./lib/living-identity-vault');

async function runDemo() {
    console.log(`
üÜî ======================================== üÜî
    LIVING IDENTITY VAULT DEMO
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
üÜî ======================================== üÜî
    `);

    const vault = new LivingIdentityVault();
    await vault.init();

    // 1. –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
    console.log('üìá 1. –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ...\n');
    
    const emailSoul = await vault.addContact('email', 'user@example.com', {
        purpose: 'primary_communication',
        canForget: true
    });
    
    const phoneSoul = await vault.addContact('phone', '+380XXXXXXXXX', {
        purpose: 'security_2fa',
        canForget: false // –ù–µ –º–æ–∂–µ–º–æ –∑–∞–±—É—Ç–∏ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è 2FA
    });
    
    // 2. –°—Ç–≤–æ—Ä—é—î–º–æ SSH –∫–ª—é—á
    console.log('\nüîë 2. –°—Ç–≤–æ—Ä—é—î–º–æ SSH –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä—ñ–≤...\n');
    
    const sshKey = await vault.createSSHKey('production-server', {
        autoRotate: true,
        expires: Date.now() + (365 * 24 * 60 * 60 * 1000) // 1 —Ä—ñ–∫
    });
    
    console.log('SSH –∫–ª—é—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é —Ä–æ—Ç–∞—Ü—ñ—î—é');
    
    // 3. –î—ñ–ª–∏–º–æ—Å—è –¥–∞–Ω–∏–º–∏ –∑ —Å–µ—Ä–≤—ñ—Å–∞–º–∏
    console.log('\nüîó 3. –î—ñ–ª–∏–º–æ—Å—è –¥–∞–Ω–∏–º–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏...\n');
    
    // Email –∑ GitHub
    await vault.shareIdentityWith(emailSoul, 'github.com', 'full', {
        purpose: 'account_recovery',
        canRevoke: true,
        legalRequirement: false
    });
    
    // Email –∑ –±–∞–Ω–∫–æ–º
    await vault.shareIdentityWith(emailSoul, 'bank', 'notifications_only', {
        purpose: 'security_alerts',
        canRevoke: false,
        legalRequirement: true // –ë–∞–Ω–∫–∏ –º–∞—é—Ç—å –∑–∞–∫–æ–Ω–Ω—ñ –≤–∏–º–æ–≥–∏
    });
    
    // Phone –∑ –±–∞–Ω–∫–æ–º –¥–ª—è 2FA
    await vault.shareIdentityWith(phoneSoul, 'bank', '2fa_only', {
        purpose: 'two_factor_auth',
        canRevoke: false,
        legalRequirement: true
    });
    
    // Email –∑ –ø—ñ–¥–ø–∏—Å–∫–æ—é –Ω–∞ –Ω–æ–≤–∏–Ω–∏
    await vault.shareIdentityWith(emailSoul, 'newsletter-service', 'marketing', {
        purpose: 'marketing_updates',
        canRevoke: true,
        autoForget: '12_months_inactive'
    });
    
    // SSH –∫–ª—é—á –∑ production —Å–µ—Ä–≤–µ—Ä–æ–º
    const entities = Array.from(vault.identityEntities.values());
    const sshEntity = entities.find(e => e.type === 'ssh_key');
    
    await vault.shareIdentityWith(sshEntity.soul, 'production-vps', 'full', {
        purpose: 'server_access',
        canRevoke: true,
        autoUpdate: true // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü—ñ—ó –∫–ª—é—á–∞
    });
    
    // 4. –ê—É–¥–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ
    console.log('\nüîç 4. –ê—É–¥–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ...\n');
    
    const audit = await vault.auditPrivacy();
    
    console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å—å–æ–≥–æ —Å—É—Ç–Ω–æ—Å—Ç–µ–π: ${audit.totalEntities}`);
    console.log(`   –ù–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫: ${audit.summary.riskDistribution.low}`);
    console.log(`   –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫: ${audit.summary.riskDistribution.medium}`);
    console.log(`   –í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫: ${audit.summary.riskDistribution.high}`);
    
    console.log('\nüìã –•—Ç–æ –∑–Ω–∞—î —è–∫—ñ –¥–∞–Ω—ñ:');
    for (const [type, services] of Object.entries(audit.sharingMap)) {
        console.log(`   ${type}: ${services.join(', ')}`);
    }
    
    // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–±—É—Ç—Ç—è
    console.log('\nüóëÔ∏è 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–±—É—Ç—Ç—è...\n');
    
    // –ó–∞–±—É–≤–∞—î–º–æ email –∑ newsletter (–º–æ–∂–µ–º–æ - –Ω–µ legal requirement)
    const emailEntity = vault.identityEntities.get(emailSoul);
    await emailEntity.forgetFrom('newsletter-service', 'api');
    
    // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–±—É—Ç–∏ –∑ –±–∞–Ω–∫—É (–Ω–µ –∑–º–æ–∂–µ–º–æ - legal requirement)
    await emailEntity.forgetFrom('bank', 'gdpr');
    
    // 6. –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    console.log('\nüìä 6. –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–±—É—Ç—Ç—è...\n');
    
    for (const [soul, entity] of vault.identityEntities) {
        console.log(`${entity.type} (${entity.value.substring(0, 20)}...):`);
        for (const [service, record] of entity.knownBy) {
            console.log(`   ‚îî‚îÄ‚îÄ ${service}: ${record.accessLevel} (can revoke: ${record.canRevoke})`);
        }
        console.log('');
    }
    
    // 7. –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó SSH –∫–ª—é—á–∞
    console.log('üîÑ 7. –°–∏–º—É–ª—è—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ—ó SSH –∫–ª—é—á–∞...\n');
    
    await sshEntity.mutate(); // –ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤–∏–π –∫–ª—é—á
    
    console.log('SSH –∫–ª—é—á –æ–Ω–æ–≤–ª–µ–Ω–æ. –°–µ—Ä–≤—ñ—Å–∏ –∑ autoUpdate –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤–∏–π –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.');
    
    console.log(`
‚ú® ======================================== ‚ú®
    DEMO –ó–ê–í–ï–†–®–ï–ù–û
‚ú® ======================================== ‚ú®

–í–∏ –ø–æ–±–∞—á–∏–ª–∏ —è–∫ Living Identity Vault:
‚úÖ –í—ñ–¥—Å—Ç–µ–∂—É—î —Ö—Ç–æ –∑–Ω–∞—î –≤–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ
‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—é—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
‚úÖ –ü–æ–≤–∞–∂–∞—î legal requirements
‚úÖ –î–æ–∑–≤–æ–ª—è—î –∑–∞–±—É—Ç–∏ –¥–∞–Ω—ñ –∫–æ–ª–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î –∫–ª—é—á—ñ/–ø–∞—Ä–æ–ª—ñ
‚úÖ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∞—É–¥–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ

–¶–µ —Ä–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ privacy management!
    `);
}

runDemo().catch(console.error);