#!/usr/bin/env node

/**
 * Simplified Demo of Living Identity Concept
 * –ü–æ–∫–∞–∑—É—î –∫–æ–Ω—Ü–µ–ø—Ü—ñ—é –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
 */

class SimpleLivingEntity {
    constructor(type, value) {
        this.type = type;
        this.value = value;
        this.soul = `${type}-${Date.now()}`;
        this.birth = Date.now();
        this.knownBy = new Map(); // service -> access_info
        this.shareHistory = [];
    }

    shareWith(service, accessLevel, metadata = {}) {
        const record = {
            service,
            accessLevel,
            sharedAt: Date.now(),
            purpose: metadata.purpose || 'unspecified',
            canRevoke: metadata.canRevoke !== false,
            legalRequirement: metadata.legalRequirement || false
        };

        this.knownBy.set(service, record);
        this.shareHistory.push({ ...record, action: 'shared' });

        console.log(`üîó ${this.type} shared with ${service} (${accessLevel})`);
        console.log(`   Purpose: ${record.purpose}`);
        console.log(`   Can revoke: ${record.canRevoke}`);
        
        return record;
    }

    forgetFrom(service, method = 'api') {
        const record = this.knownBy.get(service);
        if (!record) {
            console.log(`‚ÑπÔ∏è ${this.type} not shared with ${service}`);
            return false;
        }

        if (record.legalRequirement) {
            console.log(`‚ùå Cannot revoke ${this.type} from ${service} - legal constraint`);
            return false;
        }

        if (!record.canRevoke) {
            console.log(`‚ùå Cannot revoke ${this.type} from ${service} - contractual constraint`);
            return false;
        }

        this.knownBy.delete(service);
        this.shareHistory.push({
            service,
            action: 'forgotten',
            method,
            timestamp: Date.now()
        });

        console.log(`üóëÔ∏è Forgotten ${this.type} from ${service} via ${method}`);
        return true;
    }

    getPrivacyAudit() {
        const now = Date.now();
        const age = now - this.birth;
        const shareCount = this.knownBy.size;

        const risks = [];
        if (age > 365 * 24 * 60 * 60 * 1000) risks.push('old_data');
        if (shareCount > 5) risks.push('widely_shared');

        return {
            type: this.type,
            age: Math.floor(age / (24 * 60 * 60 * 1000)), // days
            shareCount,
            risks,
            services: Array.from(this.knownBy.keys())
        };
    }
}

async function runDemo() {
    console.log(`
üÜî ======================================== üÜî
    LIVING IDENTITY VAULT DEMO
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª—é –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
üÜî ======================================== üÜî
    `);

    // 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∂–∏–≤—ñ –¥–∞–Ω—ñ
    console.log('üìá 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∂–∏–≤—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ...\n');
    
    const email = new SimpleLivingEntity('email', 'user@example.com');
    const phone = new SimpleLivingEntity('phone', '+380XXXXXXXXX');
    const sshKey = new SimpleLivingEntity('ssh_key', 'ssh-ed25519 AAAAC3NzaC1...');

    // 2. –î—ñ–ª–∏–º–æ—Å—è –∑ —Å–µ—Ä–≤—ñ—Å–∞–º–∏
    console.log('\nüîó 2. –î—ñ–ª–∏–º–æ—Å—è –¥–∞–Ω–∏–º–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏...\n');
    
    email.shareWith('github.com', 'full', {
        purpose: 'account_recovery',
        canRevoke: true
    });
    
    email.shareWith('bank', 'notifications_only', {
        purpose: 'security_alerts',
        canRevoke: false,
        legalRequirement: true
    });
    
    email.shareWith('newsletter-service', 'marketing', {
        purpose: 'marketing_updates',
        canRevoke: true
    });
    
    phone.shareWith('bank', '2fa_only', {
        purpose: 'two_factor_auth',
        canRevoke: false,
        legalRequirement: true
    });
    
    sshKey.shareWith('production-vps', 'full', {
        purpose: 'server_access',
        canRevoke: true
    });

    // 3. –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    console.log('\nüìä 3. –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥–∞–Ω–∏—Ö...\n');
    
    const entities = [email, phone, sshKey];
    
    entities.forEach(entity => {
        console.log(`${entity.type} (${entity.value.substring(0, 30)}...):`);
        for (const [service, record] of entity.knownBy) {
            console.log(`   ‚îî‚îÄ‚îÄ ${service}: ${record.accessLevel} (can revoke: ${record.canRevoke})`);
        }
        console.log('');
    });

    // 4. –ê—É–¥–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ
    console.log('üîç 4. –ê—É–¥–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ...\n');
    
    entities.forEach(entity => {
        const audit = entity.getPrivacyAudit();
        console.log(`${audit.type}:`);
        console.log(`   Age: ${audit.age} days`);
        console.log(`   Shared with: ${audit.shareCount} services`);
        console.log(`   Risks: ${audit.risks.join(', ') || 'none'}`);
        console.log(`   Services: ${audit.services.join(', ')}`);
        console.log('');
    });

    // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–±—É—Ç—Ç—è
    console.log('üóëÔ∏è 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–±—É—Ç—Ç—è...\n');
    
    // –ó–∞–±—É–≤–∞—î–º–æ email –∑ newsletter (–º–æ–∂–µ–º–æ)
    console.log('–°–ø—Ä–æ–±–∞ –∑–∞–±—É—Ç–∏ email –∑ newsletter-service:');
    email.forgetFrom('newsletter-service', 'api');
    
    console.log('\n–°–ø—Ä–æ–±–∞ –∑–∞–±—É—Ç–∏ email –∑ –±–∞–Ω–∫—É:');
    email.forgetFrom('bank', 'gdpr');
    
    console.log('\n–°–ø—Ä–æ–±–∞ –∑–∞–±—É—Ç–∏ phone –∑ –±–∞–Ω–∫—É:');
    phone.forgetFrom('bank', 'gdpr');

    // 6. –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    console.log('\nüìä 6. –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–±—É—Ç—Ç—è...\n');
    
    entities.forEach(entity => {
        console.log(`${entity.type}:`);
        for (const [service, record] of entity.knownBy) {
            console.log(`   ‚îî‚îÄ‚îÄ ${service}: ${record.accessLevel}`);
        }
        console.log('');
    });

    // 7. –Ü—Å—Ç–æ—Ä—ñ—è –¥—ñ–π
    console.log('üìú 7. –Ü—Å—Ç–æ—Ä—ñ—è –¥—ñ–π –∑ –æ—Å–æ–±–∏—Å—Ç–∏–º–∏ –¥–∞–Ω–∏–º–∏...\n');
    
    entities.forEach(entity => {
        if (entity.shareHistory.length > 0) {
            console.log(`${entity.type} history:`);
            entity.shareHistory.forEach(action => {
                const date = new Date(action.timestamp || action.sharedAt).toLocaleString();
                console.log(`   ${date}: ${action.action} with ${action.service}`);
            });
            console.log('');
        }
    });

    console.log(`
‚ú® ======================================== ‚ú®
    –ö–û–ù–¶–ï–ü–¶–Ü–Ø –ü–†–û–î–ï–ú–û–ù–°–¢–†–û–í–ê–ù–ê
‚ú® ======================================== ‚ú®

–ö–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ Living Identity Vault:

üéØ –í–Ü–î–°–¢–ï–ñ–ï–ù–ù–Ø:
   ‚úì –ö–æ–∂–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö –∑–Ω–∞—î –¥–µ –≤—ñ–Ω –∂–∏–≤–µ
   ‚úì –ó–∞–ø–∏—Å—É—î –≤—Å—ñ sharing —ñ forgetting –æ–ø–µ—Ä–∞—Ü—ñ—ó
   ‚úì –†–æ–∑—É–º—ñ—î —Å–≤–æ—ó –ø—Ä–∞–≤–∞ —ñ –æ–±–º–µ–∂–µ–Ω–Ω—è

üîí –ö–û–ù–¢–†–û–õ–¨:
   ‚úì –†—ñ–∑–Ω—ñ —Ä—ñ–≤–Ω—ñ –¥–æ—Å—Ç—É–ø—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
   ‚úì –ü–æ–≤–∞–∂–∞—î legal requirements
   ‚úì –î–æ–∑–≤–æ–ª—è—î –∑–∞–±—É—Ç—Ç—è –∫–æ–ª–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ

üîç –ê–£–î–ò–¢:
   ‚úì –ü–æ–∫–∞–∑—É—î —Ö—Ç–æ –∑–Ω–∞—î —â–æ –ø—Ä–æ –≤–∞—Å
   ‚úì –í–∏—è–≤–ª—è—î —Ä–∏–∑–∏–∫–∏ privacy
   ‚úì –†–µ–∫–æ–º–µ–Ω–¥—É—î –¥—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

üóëÔ∏è –ó–ê–ë–£–¢–¢–Ø:
   ‚úì –ü—Ä–∞–≤–æ –Ω–∞ –∑–∞–±—É—Ç—Ç—è (GDPR Article 17)
   ‚úì –†—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏ (API, GDPR requests, nuclear)
   ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–±—É—Ç—Ç—è –∑–∞ —É–º–æ–≤–∞–º–∏

–¶–µ –º–∞–π–±—É—Ç–Ω—î privacy management!
    `);
}

runDemo().catch(console.error);